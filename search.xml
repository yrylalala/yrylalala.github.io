<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>821.字符的最短距离</title>
    <url>/2021/03/03/821.%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%9D%E7%A6%BB/</url>
    <content><![CDATA[<h3 id="题目地址"><a href="#题目地址" class="headerlink" title="题目地址"></a>题目地址</h3><p><a class="link"   href="https://leetcode-cn.com/problems/shortest-distance-to-a-character/" >https://leetcode-cn.com/problems/shortest-distance-to-a-character/<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定一个字符串 S 和一个字符 C。返回一个代表字符串 S 中每个字符到字符串 S 中的字符 C 的最短距离的数组。</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">输入：S &#x3D; &quot;loveleetcode&quot;, C &#x3D; &#39;e&#39;</span><br><span class="line">输出：[3, 2, 1, 0, 1, 0, 0, 1, 2, 2, 1, 0]</span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line">字符串 S 的长度范围为 [1, 10000]。</span><br><span class="line">C 是一个单字符，且保证是字符串 S 里的字符。</span><br><span class="line">S 和 C 中的所有字母均为小写字母。</span><br></pre></td></tr></table></figure>
<h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><ul>
<li>数组遍历</li>
</ul>
<h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路 1"></a>思路 1</h3><p>遍历该字符串，找到对应的字符，然后以该字符的位置向左右扩展，计算距离</p>
<h3 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h3><ul>
<li> 需要注意遍历的判断条件</li>
</ul>
<ol>
<li>当遍历到的字符位置距离值还是 0 的时候填充距离，并继续扩展</li>
<li>当遍历到的字符位置距离值小于已填充的距离值值时填充距离，并继续扩展</li>
<li>当遇到字符串左右边界的时候返回</li>
<li>当遇到同样字符 C 的时候返回</li>
</ol>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ul>
<li>语言支持：Java</li>
</ul>
<p>Java Code:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] shortestToChar(String S, <span class="keyword">char</span> C) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] ret = <span class="keyword">new</span> <span class="keyword">int</span>[S.length()];</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> dist = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; S.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (C == S.charAt(i)) &#123;</span><br><span class="line">                left = i - <span class="number">1</span>;</span><br><span class="line">                right = i + <span class="number">1</span>;</span><br><span class="line">                ret[i] = <span class="number">0</span>;</span><br><span class="line">                dist = <span class="number">1</span>;</span><br><span class="line">               <span class="comment">/* 向左延伸 +*/</span></span><br><span class="line">                <span class="keyword">while</span> ((left &gt;= <span class="number">0</span>) &amp;&amp; </span><br><span class="line">                       (S.charAt(left) != C) &amp;&amp;</span><br><span class="line">                       (ret[left] == <span class="number">0</span> || ret[left] &gt; dist)) &#123;</span><br><span class="line">                        ret[left] = dist;</span><br><span class="line">                        dist++;</span><br><span class="line">                        left--;</span><br><span class="line">                &#125;</span><br><span class="line">                 <span class="comment">/* 向右延伸 */</span></span><br><span class="line">                dist = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> ((right &lt; S.length()) &amp;&amp; </span><br><span class="line">                       (S.charAt(right) != C) &amp;&amp; </span><br><span class="line">                       (ret[right] == <span class="number">0</span> || ret[right] &gt; dist)) &#123;</span><br><span class="line">                    ret[right] = dist;</span><br><span class="line">                    dist++;</span><br><span class="line">                    right++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong><br>令 n 为数组长度。</p>
<ul>
<li>时间复杂度：O(n)，理论上是遍历两遍数组，循环查找字符 C，然后再从 C 开始扩展。</li>
<li>空间复杂度：O(n)，只需要额外只用一个数组空间用来存返回值即可。</li>
</ul>
<h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路 2"></a>思路 2</h3><p>另外一个比较巧妙的办法是<br>先从头遍历一遍字符串，计算每个位置的字符到前一个字符 C 的距离<br>再从尾遍历一遍字符串，再用同样方法计算距离，若距离小于已填充的，就替换成新的距离</p>
<h3 id="关键点-1"><a href="#关键点-1" class="headerlink" title="关键点"></a>关键点</h3><ul>
<li> 怎么保证两头的字符位置计算</li>
</ul>
<ol>
<li>从头开始遍历时，距离初始值为 -10001，因为字符最大长度是 10000，这样在出现第一个字符 C 之前的距离值全为负值<br> 而倒过来遍历的时候若距离值为负数，就可以直接覆盖</li>
<li>从尾开始遍历时，距离初始值为 10001，这样在开始遍历的时候，一定是小于已填充的距离值</li>
</ol>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><ul>
<li>语言支持：C++  </li>
</ul>
<p>C++ Code:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">shortestToChar</span><span class="params">(<span class="built_in">string</span> S, <span class="keyword">char</span> C)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">distVec</span><span class="params">(S.size(), <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="comment">// 从头到尾遍历</span></span><br><span class="line">        <span class="keyword">int</span> dist = <span class="number">-10001</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; S.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (S[i] == C) &#123;</span><br><span class="line">                distVec[i] = <span class="number">0</span>;</span><br><span class="line">                dist = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                distVec[i] = dist;</span><br><span class="line">                dist++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 尾到头遍历</span></span><br><span class="line">        dist = <span class="number">10001</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = S.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span> ; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (S[i] == C) &#123;</span><br><span class="line">                distVec[i] = <span class="number">0</span>;</span><br><span class="line">                dist = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (distVec[i] &lt; <span class="number">0</span> || distVec[i] &gt; dist) &#123;</span><br><span class="line">                    distVec[i] = dist;</span><br><span class="line">                    dist++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> distVec;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析</strong><br>令 n 为数组长度。</p>
<ul>
<li>时间复杂度：O(n)，需要遍历两边数组</li>
<li>空间复杂度：O(n)，需要返回值的额外空间</li>
</ul>
]]></content>
      <categories>
        <category>数据结构及算法</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>数据结构及算法</tag>
      </tags>
  </entry>
</search>
